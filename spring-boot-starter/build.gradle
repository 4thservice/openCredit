plugins {
	id 'org.springframework.boot' version '2.1.4.RELEASE'
	id "io.freefair.lombok" version "3.2.0"
	id 'java'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
//apply plugin: 'war'
//apply plugin: 'application'


description = 'Spring Boot Starter'

sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "https://dl.bintray.com/ethereum/maven/" }
    mavenCentral()
}

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-logging'
	compile('org.springframework.boot:spring-boot-starter-web')

	compile 'org.codehaus.groovy:groovy-all:2.5.6'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
//	compileOnly "org.springframework.boot:spring-boot-configuration-processor"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	compile	'org.fisco-bcos:web3sdk:2.0.0-rc1'
    compile 'org.projectlombok:lombok:1.18.6'

	// JPA Data (We are going to use Repositories, Entities, Hibernate, etc...)
	compile 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Use MySQL Connector-J
	compile 'mysql:mysql-connector-java'
}

configurations {
	all {
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

sourceSets {
	main {
		java {
			srcDirs = ["src/main/java"]
		}
		resources {
			srcDirs = ["src/main/resources"]
		}
	}
	test {
		java {
			srcDirs = ["src/test/java"]
		}
		resources {
			srcDirs = ["src/test/resources"]
		}
	}
}

clean {
	delete 'dist'
	delete 'build'
}

bootJar {
	destinationDir file('dist/apps')
	archiveName project.name + '.jar'
	exclude '**/*.xml'
//	exclude '**/*.properties'

	doLast {
		copy {
			from file('src/main/resources/')
			into 'dist/conf'
		}
		copy {
			from file('files/')
			into 'dist/files'
		}
		copy {
			from configurations.runtime
			into 'dist/lib'
		}
		copy {
			from file('.').listFiles().findAll{File f -> (f.name.endsWith('.bat') || f.name.endsWith('.sh') || f.name.endsWith('.env'))}
			into 'dist'
		}
	}
}